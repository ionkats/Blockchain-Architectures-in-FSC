import contractABI from "./ABI.js"

// used for the deployment of the contract along the ABI
var contractData = "0x608060405234801561001057600080fd5b50610b2b806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80636b856cd714610067578063b45aed2814610083578063b5a7ea061461009f578063b6dbd825146100bd578063c6e5a419146100d9578063ce651c1a14610109575b600080fd5b610081600480360381019061007c91906105f7565b610125565b005b61009d6004803603810190610098919061057c565b610197565b005b6100a761023e565b6040516100b4919061073a565b60405180910390f35b6100d760048036038101906100d29190610529565b610244565b005b6100f360048036038101906100ee91906104a0565b610310565b60405161010091906106df565b60405180910390f35b610123600480360381019061011e91906104cd565b610330565b005b7f1bf43c4e75a7bff085adfa4cd1169f72e357c0b294df3682aa5e0a846fb4953061014e6103ce565b824260405161015f939291906107d8565b60405180910390a16001600080600154815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b60008086815260200190815260200160002060009054906101000a900460ff166101f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ed9061071a565b60405180910390fd5b7fb76311841ad1bf4e1210e6abb3a27711c6cd5c176fc83a2d6109f34e70b0671385858585854260405161022f9695949392919061080f565b60405180910390a15050505050565b60015481565b60008084815260200190815260200160002060009054906101000a900460ff166102a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161029a906106fa565b60405180910390fd5b7fd10cf7e55fd1ee438dcbd3db7f77f6cf1e212df7868df78c9b21682b046b67b6838383426040516102d89493929190610793565b60405180910390a1600080600085815260200190815260200160002060006101000a81548160ff021916908315150217905550505050565b60006020528060005260406000206000915054906101000a900460ff1681565b60008083815260200190815260200160002060009054906101000a900460ff1661038f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610386906106fa565b60405180910390fd5b7f4303a873fbd8b09c053de5da9bd4246acb454c5c47b33a1446844caf71f860598242836040516103c293929190610755565b60405180910390a15050565b600060018060008282546103e291906108e2565b92505081905550600154905090565b60006104046103ff84610895565b610870565b9050828152602081018484840111156104205761041f610a3e565b5b61042b848285610968565b509392505050565b60008135905061044281610ab0565b92915050565b600082601f83011261045d5761045c610a39565b5b813561046d8482602086016103f1565b91505092915050565b60008135905061048581610ac7565b92915050565b60008135905061049a81610ade565b92915050565b6000602082840312156104b6576104b5610a48565b5b60006104c484828501610476565b91505092915050565b600080604083850312156104e4576104e3610a48565b5b60006104f285828601610476565b925050602083013567ffffffffffffffff81111561051357610512610a43565b5b61051f85828601610448565b9150509250929050565b60008060006060848603121561054257610541610a48565b5b600061055086828701610476565b93505060206105618682870161048b565b925050604061057286828701610433565b9150509250925092565b600080600080600060a0868803121561059857610597610a48565b5b60006105a688828901610476565b95505060206105b78882890161048b565b94505060406105c88882890161048b565b93505060606105d988828901610433565b92505060806105ea88828901610433565b9150509295509295909350565b60006020828403121561060d5761060c610a48565b5b600061061b8482850161048b565b91505092915050565b61062d81610938565b82525050565b61063c81610944565b82525050565b600061064d826108c6565b61065781856108d1565b9350610667818560208601610977565b61067081610a4d565b840191505092915050565b60006106886012836108d1565b915061069382610a5e565b602082019050919050565b60006106ab6012836108d1565b91506106b682610a87565b602082019050919050565b6106ca8161094e565b82525050565b6106d981610958565b82525050565b60006020820190506106f46000830184610624565b92915050565b600060208201905081810360008301526107138161067b565b9050919050565b600060208201905081810360008301526107338161069e565b9050919050565b600060208201905061074f60008301846106c1565b92915050565b600060608201905061076a60008301866106c1565b61077760208301856106c1565b81810360408301526107898184610642565b9050949350505050565b60006080820190506107a860008301876106c1565b6107b560208301866106d0565b6107c26040830185610633565b6107cf60608301846106c1565b95945050505050565b60006060820190506107ed60008301866106c1565b6107fa60208301856106d0565b61080760408301846106c1565b949350505050565b600060c08201905061082460008301896106c1565b61083160208301886106d0565b61083e60408301876106d0565b61084b6060830186610633565b6108586080830185610633565b61086560a08301846106c1565b979650505050505050565b600061087a61088b565b905061088682826109aa565b919050565b6000604051905090565b600067ffffffffffffffff8211156108b0576108af610a0a565b5b6108b982610a4d565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b60006108ed8261094e565b91506108f88361094e565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561092d5761092c6109db565b5b828201905092915050565b60008115159050919050565b6000819050919050565b6000819050919050565b600063ffffffff82169050919050565b82818337600083830152505050565b60005b8381101561099557808201518184015260208101905061097a565b838111156109a4576000848401525b50505050565b6109b382610a4d565b810181811067ffffffffffffffff821117156109d2576109d1610a0a565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e6f74206163746976652073657373696f6e0000000000000000000000000000600082015250565b7f4e6f74206163746976652053657373696f6e0000000000000000000000000000600082015250565b610ab981610944565b8114610ac457600080fd5b50565b610ad08161094e565b8114610adb57600080fd5b50565b610ae781610958565b8114610af257600080fd5b5056fea26469706673582212201c7fb9daa1c0ebf4d98fdfdffa06614ce4cf6a1d88df668f63aeb36f35cac73364736f6c63430008070033"

var contractAddresses = []
var contractObjects = []
var addresses = []


// uncomment the code blocks based on the number of servers you want to activate
export function initializeWithoutData() {

    // create instances, get the accounts and deploy the smart contract for all the chains
    var web3_0 = new Web3('ws://localhost:8540')
    var stateandsessionContract_0 = new web3_0.eth.Contract(contractABI)
    saveAccountsDeployContract(web3_0, stateandsessionContract_0, 0)


    // var web3_1 = new Web3('ws://localhost:8541')
    // var stateandsessionContract_1 = new web3_1.eth.Contract(contractABI)
    // saveAccountsDeployContract(web3_1, stateandsessionContract_1, 1)

    // var web3_2 = new Web3('ws://localhost:8542')
    // var stateandsessionContract_2 = new web3_2.eth.Contract(contractABI)
    // saveAccountsDeployContract(web3_2, stateandsessionContract_2, 2)

    // var web3_3 = new Web3('ws://localhost:8543')
    // var stateandsessionContract_3 = new web3_3.eth.Contract(contractABI)
    // saveAccountsDeployContract(web3_3, stateandsessionContract_3, 3)

    // var web3_4 = new Web3('ws://localhost:8544')
    // var stateandsessionContract_4 = new web3_4.eth.Contract(contractABI)
    // saveAccountsDeployContract(web3_4, stateandsessionContract_4, 4)

    // var web3_5 = new Web3('ws://localhost:8545')
    // var stateandsessionContract_5 = new web3_5.eth.Contract(contractABI)
    // saveAccountsDeployContract(web3_5, stateandsessionContract_5, 5)

    // var web3_6 = new Web3('ws://localhost:8546')
    // var stateandsessionContract_6 = new web3_6.eth.Contract(contractABI)
    // saveAccountsDeployContract(web3_6, stateandsessionContract_6, 6)

    // var web3_7 = new Web3('ws://localhost:8547')
    // var stateandsessionContract_7 = new web3_7.eth.Contract(contractABI)
    // saveAccountsDeployContract(web3_7, stateandsessionContract_7, 7)

    // var web3_8 = new Web3('ws://localhost:8548')
    // var stateandsessionContract_8 = new web3_8.eth.Contract(contractABI)
    // saveAccountsDeployContract(web3_8, stateandsessionContract_8, 8)

    // var web3_9 = new Web3('ws://localhost:8549')
    // var stateandsessionContract_9 = new web3_9.eth.Contract(contractABI)
    // saveAccountsDeployContract(web3_9, stateandsessionContract_9, 9)

    return([addresses, contractObjects, contractAddresses])
}


function saveAccountsDeployContract(web3_instance, stateandsessionContract, i) {
    // var address
    web3_instance.eth.getAccounts().then( fetchedAccounts => {
                                        // console.log(fetchedAccounts)
                                        addresses.push(fetchedAccounts)
                                        var max = fetchedAccounts.length
                                        stateandsessionContract.deploy({data: contractData, arguments: []})
                                                        .send({from: fetchedAccounts[random(0, max)], gas: '15000000'})
                                                        .then( (contractCreated) => {
                                                            console.log('Contract mined for chain ' + i +'. Address: ' + contractCreated.options.address)
                                                            contractAddresses.push(contractCreated.options.address)
                                                            // address = contractCreated.options.address
                                                            contractObjects.push(new web3_instance.eth.Contract(contractABI, contractCreated.options.address))
                                                        })
                                            })
    // var smartContract = new web3_instance.eth.Contract(contractABI, address)
    // contractObjects.push(smartContract)
    
}


// get random integer in [min, max)
export function random(min, max) {
    return (Math.floor(Math.random()*(max - min)) + min)
}