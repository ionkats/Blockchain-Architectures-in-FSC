import contractABI from "./ABI.js"

// used for the deployment of the contract along the ABI
var contractData = "0x608060405234801561001057600080fd5b50610baa806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80639adf3c231161005b5780639adf3c23146100d8578063b5a7ea06146100f4578063c6e5a41914610112578063f1e99adb146101425761007d565b80631094145a1461008257806333133b411461009e5780634515e8d9146100bc575b600080fd5b61009c60048036038101906100979190610505565b61015e565b005b6100a66101fe565b6040516100b391906107bf565b60405180910390f35b6100d660048036038101906100d191906105cf565b61024e565b005b6100f260048036038101906100ed919061066d565b6102fa565b005b6100fc610341565b60405161010991906107bf565b60405180910390f35b61012c600480360381019061012791906104dc565b610347565b6040516101399190610764565b60405180910390f35b61015c6004803603810190610157919061056c565b610367565b005b60008084815260200190815260200160002060009054906101000a900460ff166101bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101b49061077f565b60405180910390fd5b827f26bcc523a5e3b94458b5967eece5212cfdc664966710cb8648480b5b0d3439568383426040516101f1939291906107da565b60405180910390a2505050565b600060018060008282546102129190610975565b925050819055506001600080600154815260200190815260200160002060006101000a81548160ff021916908315150217905550600154905090565b60008088815260200190815260200160002060009054906101000a900460ff166102ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102a49061079f565b60405180910390fd5b867f9d87175ef8e1fec360aa582266352274b86963b1c6c91d27eed1db8bcfef3bec878787878787426040516102e99796959493929190610894565b60405180910390a250505050505050565b6103026101fe565b7fe49c753973c097158927b5bacda348e5d3e7b9662f88bc97727320f8774fc9d48383426040516103359392919061085d565b60405180910390a25050565b60015481565b60006020528060005260406000206000915054906101000a900460ff1681565b60008085815260200190815260200160002060009054906101000a900460ff166103c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103bd9061077f565b60405180910390fd5b837fe6655d3159cc6b5ce597695101ccc8db461698722e61567bd06e3add094898f2848484426040516103fc9493929190610818565b60405180910390a2600080600086815260200190815260200160002060006101000a81548160ff02191690831515021790555050505050565b600061044861044384610928565b610903565b90508281526020810184848401111561046057600080fd5b61046b8482856109fb565b509392505050565b60008135905061048281610b2f565b92915050565b600082601f83011261049957600080fd5b81356104a9848260208601610435565b91505092915050565b6000813590506104c181610b46565b92915050565b6000813590506104d681610b5d565b92915050565b6000602082840312156104ee57600080fd5b60006104fc848285016104b2565b91505092915050565b60008060006060848603121561051a57600080fd5b6000610528868287016104b2565b9350506020610539868287016104c7565b925050604084013567ffffffffffffffff81111561055657600080fd5b61056286828701610488565b9150509250925092565b6000806000806080858703121561058257600080fd5b6000610590878288016104b2565b94505060206105a1878288016104c7565b93505060406105b2878288016104c7565b92505060606105c387828801610473565b91505092959194509250565b600080600080600080600060e0888a0312156105ea57600080fd5b60006105f88a828b016104b2565b97505060206106098a828b016104c7565b965050604061061a8a828b016104c7565b955050606061062b8a828b016104c7565b945050608061063c8a828b016104c7565b93505060a061064d8a828b01610473565b92505060c061065e8a828b016104c7565b91505092959891949750929550565b6000806040838503121561068057600080fd5b600061068e858286016104c7565b925050602061069f858286016104c7565b9150509250929050565b6106b2816109cb565b82525050565b6106c1816109d7565b82525050565b60006106d282610959565b6106dc8185610964565b93506106ec818560208601610a0a565b6106f581610acc565b840191505092915050565b600061070d601283610964565b915061071882610add565b602082019050919050565b6000610730601283610964565b915061073b82610b06565b602082019050919050565b61074f816109e1565b82525050565b61075e816109eb565b82525050565b600060208201905061077960008301846106a9565b92915050565b6000602082019050818103600083015261079881610700565b9050919050565b600060208201905081810360008301526107b881610723565b9050919050565b60006020820190506107d46000830184610746565b92915050565b60006060820190506107ef6000830186610755565b818103602083015261080181856106c7565b90506108106040830184610746565b949350505050565b600060808201905061082d6000830187610755565b61083a6020830186610755565b61084760408301856106b8565b6108546060830184610746565b95945050505050565b60006060820190506108726000830186610755565b61087f6020830185610755565b61088c6040830184610746565b949350505050565b600060e0820190506108a9600083018a610755565b6108b66020830189610755565b6108c36040830188610755565b6108d06060830187610755565b6108dd60808301866106b8565b6108ea60a0830185610755565b6108f760c0830184610746565b98975050505050505050565b600061090d61091e565b90506109198282610a3d565b919050565b6000604051905090565b600067ffffffffffffffff82111561094357610942610a9d565b5b61094c82610acc565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b6000610980826109e1565b915061098b836109e1565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156109c0576109bf610a6e565b5b828201905092915050565b60008115159050919050565b6000819050919050565b6000819050919050565b600063ffffffff82169050919050565b82818337600083830152505050565b60005b83811015610a28578082015181840152602081019050610a0d565b83811115610a37576000848401525b50505050565b610a4682610acc565b810181811067ffffffffffffffff82111715610a6557610a64610a9d565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4e6f74206163746976652073657373696f6e0000000000000000000000000000600082015250565b7f4e6f74206163746976652053657373696f6e0000000000000000000000000000600082015250565b610b38816109d7565b8114610b4357600080fd5b50565b610b4f816109e1565b8114610b5a57600080fd5b50565b610b66816109eb565b8114610b7157600080fd5b5056fea26469706673582212206bc8333cfe1650a313fb1ad739fd58bdf1ce2830b1d1b96a5f7bc04f7f95f04364736f6c63430008040033"

var contractAddresses = []
var contractObjects = []
var addresses = []
var web3Instances = []
var counter = 0


// uncomment the code blocks based on the number of servers you want to activate
export function initializeWithoutData() {

    // create instances, get the accounts and deploy the smart contract for all the chains
    var web3_0 = new Web3('ws://localhost:8540')
    var stateandsessionContract_0 = new web3_0.eth.Contract(contractABI)
    saveAccountsDeployContract(web3_0, stateandsessionContract_0, 0)


    // var web3_1 = new Web3('ws://localhost:8541')
    // var stateandsessionContract_1 = new web3_1.eth.Contract(contractABI)
    // saveAccountsDeployContract(web3_1, stateandsessionContract_1, 1)

    // var web3_2 = new Web3('ws://localhost:8542')
    // var stateandsessionContract_2 = new web3_2.eth.Contract(contractABI)
    // saveAccountsDeployContract(web3_2, stateandsessionContract_2, 2)

    // var web3_3 = new Web3('ws://localhost:8543')
    // var stateandsessionContract_3 = new web3_3.eth.Contract(contractABI)
    // saveAccountsDeployContract(web3_3, stateandsessionContract_3, 3)

    // var web3_4 = new Web3('ws://localhost:8544')
    // var stateandsessionContract_4 = new web3_4.eth.Contract(contractABI)
    // saveAccountsDeployContract(web3_4, stateandsessionContract_4, 4)

    // var web3_5 = new Web3('ws://localhost:8545')
    // var stateandsessionContract_5 = new web3_5.eth.Contract(contractABI)
    // saveAccountsDeployContract(web3_5, stateandsessionContract_5, 5)

    // var web3_6 = new Web3('ws://localhost:8546')
    // var stateandsessionContract_6 = new web3_6.eth.Contract(contractABI)
    // saveAccountsDeployContract(web3_6, stateandsessionContract_6, 6)

    // var web3_7 = new Web3('ws://localhost:8547')
    // var stateandsessionContract_7 = new web3_7.eth.Contract(contractABI)
    // saveAccountsDeployContract(web3_7, stateandsessionContract_7, 7)

    // var web3_8 = new Web3('ws://localhost:8548')
    // var stateandsessionContract_8 = new web3_8.eth.Contract(contractABI)
    // saveAccountsDeployContract(web3_8, stateandsessionContract_8, 8)

    // var web3_9 = new Web3('ws://localhost:8549')
    // var stateandsessionContract_9 = new web3_9.eth.Contract(contractABI)
    // saveAccountsDeployContract(web3_9, stateandsessionContract_9, 9)

    return([addresses, contractObjects, contractAddresses, web3Instances, counter])
}


function saveAccountsDeployContract(web3_instance, stateandsessionContract, i) {
    counter++
    web3_instance.eth.getAccounts().then( fetchedAccounts => {
                                        // console.log(fetchedAccounts)
                                        var max = fetchedAccounts.length
                                        stateandsessionContract.deploy({data: contractData, arguments: []})
                                                        .send({from: fetchedAccounts[random(0, max)], gas: '2000000'})
                                                        .then( (contractCreated) => {
                                                            console.log('Contract mined for chain index ' + (contractAddresses.length) +'. Address: ' + contractCreated.options.address)
                                                            console.log('Address of server ends in ' + i)
                                                            contractAddresses.push(contractCreated.options.address)
                                                            contractObjects.push(new web3_instance.eth.Contract(contractABI, contractCreated.options.address))
                                                            web3Instances.push(web3_instance)
                                                            addresses.push(fetchedAccounts)
                                                    })
                                            })
}


// get random integer in [min, max)
export function random(min, max) {
    return (Math.floor(Math.random()*(max - min)) + min)
}